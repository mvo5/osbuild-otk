#!/usr/bin/python3
# pylint: disable=invalid-name,too-many-locals

import json
import os
import pathlib
import subprocess
import sys
import tempfile

import yaml


# XXX: keep in syncwith "test_against_images_ref.py"
# note that the names of customizations/modifications may not fully match
full_customizations = {
    "name": "full",
    "blueprint": {
        "customizations": {
            "locale": {
                "languages": ["nl_NL.UTF-8"],
            },
        },
    },
}


# see https://github.com/yaml/pyyaml/issues/234#issuecomment-765894586
class Dumper(yaml.Dumper):  # pylint: disable=too-many-ancestors
    def increase_indent(self, flow: bool = False, indentless: bool = False) -> None:
        return super().increase_indent(flow=flow, indentless=False)


def uuid_for_path(path, osbuild_manifest):
    for p in osbuild_manifest["pipelines"]:
        for stage in p["stages"]:
            if stage["type"] == "org.osbuild.fstab":
                for fs in stage["options"]["filesystems"]:
                    if fs["path"] == path:
                        return fs["uuid"]
    return ""


def make_buildconfig(customizations: str) -> dict:
    match customizations:
        case "empty":
            return {"name": "empty"}
        case "full":
            return full_customizations
        case _:
            raise ValueError(f"unknown customization {customizations}")


# pylint: disable=too-many-arguments
def generate_reference_image(images_base_dir: str, distro_name: str,
                             distro_ver: str, arch: str, img_type: str,
                             customizations: str) -> None:
    # pylint: disable=consider-using-with
    empty_config = tempfile.NamedTemporaryFile()
    empty_config.write(json.dumps(make_buildconfig(customizations)).encode())
    empty_config.flush()

    # ideally we would just generate all manifests on the fly but today
    # that requires a git checkout of "images". with something like
    # https://github.com/osbuild/images/pull/902 we could automate this
    # here and just call the remote binary via "go run"
    env = os.environ.copy()
    env["OSBUILD_TESTING_RNG_SEED"] = "0"
    distro = f"{distro_name}-{distro_ver}"
    manifest_path = pathlib.Path.cwd() / distro_name / distro_ver / arch / img_type / customizations
    manifest_path.parent.mkdir(parents=True, exist_ok=True)
    subprocess.check_call([
        "cmd/gen-manifests/gen-manifests",
        "-output", manifest_path,
        "-packages=False", "-commits=False",
        "-containers=False", "-metadata=False",
        "-distros", distro,
        "-arches", arch,
        "-types", img_type,
        "-config", empty_config.name,
    ], cwd=images_base_dir, env=env)
    generated = list(manifest_path.glob(f"*-{customizations}.json"))
    if len(generated) != 1:
        raise ValueError(f"unexpected number of generated manifests: {generated}")
    with open(generated[0], encoding="utf8") as fp:
        manifest_str = fp.read()

    # XXX: this is hacky, the OSBUILD_TESTING_RNG_SEED is set for both
    # "gen-manifests" and "otk-gen-partition-tables" but the partition
    # table code is called slightly differently which means that the UUIDs
    # get out of sync. We need this (f)ugly helper to fix it:
    if rootfs_uuid := uuid_for_path("/", json.loads(manifest_str)):
        manifest_str = manifest_str.replace(rootfs_uuid, "9851898e-0b30-437d-8fad-51ec16c3697f")
    if bootfs_uuid := uuid_for_path("/boot", json.loads(manifest_str)):
        manifest_str = manifest_str.replace(bootfs_uuid, "dbd21911-1c4e-4107-8a9f-14fe6e751358")

    # now convert to json
    manifest = json.loads(manifest_str)

    yaml_path = generated[0].with_suffix(".yaml")
    with yaml_path.open("w", encoding="utf8") as fp:
        yaml.dump(manifest, fp, Dumper=Dumper, sort_keys=False)
    print(f"image generated in {yaml_path}")


def run():
    # TODO: add argparse
    if len(sys.argv) < 6:
        # TODO: remove images-git-checkout parameter and use something
        # like "go run github.com/osbuild/images/cmd/build@latest" but
        # this needs something like https://github.com/osbuild/images/pull/902
        print("need <image-git-checkout> <distoname> <distrover> <arch> <img_type> <customizations>", file=sys.stderr)
        sys.exit(1)
    generate_reference_image(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5], sys.argv[6])


if __name__ == "__main__":
    run()
